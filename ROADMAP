							-*-org-*-

Most of code example here : https://git.enlightenment.org/enlightenment
API documentation https://www.enlightenment.org/develop/api/start

* v1.0.0
** v0.1.0
*** v0.0.1
**** Handle translation using gettext
**** Maybe a latex-based rasterisation engine
**** Implement the scrapper
:LOGBOOK:
CLOCK: [2023-08-22 mar. 09:06]--[2023-08-22 mar. 09:24] =>  0:18
CLOCK: [2023-08-22 mar. 08:48]--[2023-08-22 mar. 09:05] =>  0:17
CLOCK: [2023-08-21 lun. 07:22]--[2023-08-21 lun. 07:46] =>  0:24
CLOCK: [2023-08-16 mer. 06:26]--[2023-08-16 mer. 06:52] =>  0:26
CLOCK: [2023-08-16 mer. 05:47]--[2023-08-16 mer. 06:13] =>  0:26
:END:
via unit tests
- [X] Implement scrapper_set_url
- [X] CMake should search for libcurl
  
- [-] Now, implement scrapper_run wich must return a 404 status code
  for a non existant domain/page
  - [X] First search for check
  - [ ] Then, use =curl_easy_perform= to retrieve HTTP status code

- [ ] If we run the main binary with an URL, we automatically scrap it
- [ ] Handle a argument to make the scrapper use multiple core at once  
- [ ] Get time of last modified of a web page from the HTTP header

- [ ] May return a scrapper_result struct with
  {HTTP status, title and markdown text}
  
**** Work on doxygen API documentation
**** TODO Add a config struct
:LOGBOOK:
CLOCK: [2023-08-21 lun. 04:06]--[2023-08-21 lun. 04:16] =>  0:10
CLOCK: [2023-08-18 ven. 05:53]--[2023-08-18 ven. 06:01] =>  0:08
CLOCK: [2023-08-18 ven. 05:10]--[2023-08-18 ven. 05:16] =>  0:06
CLOCK: [2023-08-17 jeu. 08:31]--[2023-08-17 jeu. 08:41] =>  0:10
CLOCK: [2023-08-17 jeu. 07:58]--[2023-08-17 jeu. 08:20] =>  0:22
CLOCK: [2023-08-14 lun. 05:32]--[2023-08-14 lun. 05:54] =>  0:22
CLOCK: [2023-08-14 lun. 05:04]--[2023-08-14 lun. 05:18] =>  0:14
CLOCK: [2023-08-14 lun. 02:47]--[2023-08-14 lun. 03:13] =>  0:26
:END:
And unit test this

- [X] Must fix ctor return value
- [X] Must have a basedir directory that return $HOME/.scrapper
- [X] How to deal with a generated 'config.h' from config.h.in file
  as we already have src/.h/c for the struct
  Maybe a underscore _config.h ? OK
- [X] basedir is part of the config struct
- [X] basedir_concat(filename) to get the name of the given file
  How to link this basedir with the Config struct ?

- [ ] We now should be able to retrieve a filename in app's config dir

**** TODO Implement first version
:LOGBOOK:
CLOCK: [2023-08-23 mer. 09:00]--[2023-08-23 mer. 09:16] =>  0:16
CLOCK: [2023-08-17 jeu. 06:34]--[2023-08-17 jeu. 07:20] =>  0:46
CLOCK: [2023-08-15 mar. 08:19]--[2023-08-15 mar. 08:43] =>  0:24
CLOCK: [2023-08-14 lun. 02:26]--[2023-08-14 lun. 02:46] =>  0:20
CLOCK: [2023-08-14 lun. 01:44]--[2023-08-14 lun. 01:59] =>  0:15
CLOCK: [2023-08-10 jeu. 06:18]--[2023-08-10 jeu. 06:29] =>  0:11
CLOCK: [2023-08-07 lun. 06:45]--[2023-08-07 lun. 07:32] =>  0:47
CLOCK: [2023-08-04 ven. 02:57]--[2023-08-04 ven. 03:24] =>  0:27
:END:
- [X] Find a usable licence compatible with libelementary
  Search in usable application (ecrire : GPLv3, edit etc...)
- [X] Add a lineedit and a 'Scrap' button
  Should we use a EDC file here ? yes, we have the edje_cc compiler
  see https://www.enlightenment.org/docs/themes/start
  - [X] handle edje_cc here it with cmake ?
    see https://github.com/Enlightenment/efl/blob/master/cmakeconfig/EdjeConfig.cmake.in
  - [X] Build UI with cmake
    To build it from build/ =edje_cc ../ui/main.edc main.edj=
    - [X] Add =add_custom_command= command in cmake script
    - [X] Make sure it works

- [ ] Add unit tests using check ?
  May add the `make check` rule and fix README
- [ ] Fix actual edje file and add needed ui
  see https://louis-du-verdier.developpez.com/efl/debuter/?page=edje
  - [ ] Can't find a text input widget
    Search in the ecrire package
    For example, in the open dialog, there's the 'Search/Rechercher' input
    https://github.com/Obsidian-StudiosInc/ecrire/blob/master/src/bin/ui/search_dialog.c
    or the find dialog
- persistance maybe through mongodb ? in persist.h/c
  Save full HTML or only AST representation

- [ ] May test memory leaks using valgrind

**** TODO Correct project setup
:LOGBOOK:
CLOCK: [2023-08-21 lun. 04:21]--[2023-08-21 lun. 04:27] =>  0:06
CLOCK: [2023-08-03 jeu. 04:31]--[2023-08-03 jeu. 04:49] =>  0:18
:END:
- [X] Try to build a simple tutorial example
https://www.enlightenment.org/develop/efl/start
- [X] Should use cmake
- [ ] Make this project public at github
  - [ ] Then configure github action to launch unit tests
    The simplest way to run test is =ctest= but it doesn't show the
    unit test output
- [ ] May configure github actions to run unitt tests
